// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DataFac.Memory;
using DTOMaker.Runtime.MemBlocks;
namespace MyOrg.Models.MemBlocks
{
    public partial class MyDTO : DTOMaker.Runtime.MemBlocks.EntityBase, IMyDTO, IEquatable<MyDTO>
    {
        // Derived entities: 0

        private const int ClassHeight = 1;
        private const int BlockLength = 128;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        public new const string EntityId = "MyDTO";

        public new static MyDTO CreateFrom(string entityId, ReadOnlyMemory<ReadOnlyMemory<byte>> buffers)
        {
            return entityId switch
            {
                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<ReadOnlyMemory<byte>> buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers.Span[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     1        Boolean LE    Field1
        //     2     1     1        SByte   LE    Field2
        //     3     2     1        Byte    LE    Field3
        //     4     4     2        Int16   LE    Field4
        //     5     6     2        UInt16  LE    Field5
        //     6     8     2        Char    LE    Field6
        //     7    10     2        Half    LE    Field7
        //     8    12     4        Int32   LE    Field8
        //     9    16     4        UInt32  LE    Field9
        //    10    20     4        Single  LE    Field10
        //    11    24     8        Int64   LE    Field11
        //    12    32     8        UInt64  LE    Field12
        //    13    40     8        Double  LE    Field13
        //    14    48    16        Guid    LE    Field14
        //    15    64    16        Int128  LE    Field15
        //    16    80    16        UInt128 LE    Field16
        //    17    96    16        Decimal LE    Field17
        // ------------------------------------------------------------

        public MyDTO()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public MyDTO(MyDTO source, bool frozen = false) : base(source, frozen)
        {
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public MyDTO(IMyDTO source, bool frozen = false) : base(source, frozen)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.Field1 = source.Field1;
            this.Field2 = source.Field2;
            this.Field3 = source.Field3;
            this.Field4 = source.Field4;
            this.Field5 = source.Field5;
            this.Field6 = source.Field6;
            this.Field7 = source.Field7;
            this.Field8 = source.Field8;
            this.Field9 = source.Field9;
            this.Field10 = source.Field10;
            this.Field11 = source.Field11;
            this.Field12 = source.Field12;
            this.Field13 = source.Field13;
            this.Field14 = source.Field14;
            this.Field15 = source.Field15;
            this.Field16 = source.Field16;
            this.Field17 = source.Field17;
        }

        public MyDTO(ReadOnlyMemory<ReadOnlyMemory<byte>> buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers.Span[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        public Boolean Field1
        {
            get
            {
                return (Boolean)Codec_Boolean_LE.ReadFromSpan(_readonlyBlock.Slice(0, 1).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Boolean_LE.WriteToSpan(_writableBlock.Slice(0, 1).Span, value);
            }
        }

        public SByte Field2
        {
            get
            {
                return (SByte)Codec_SByte_LE.ReadFromSpan(_readonlyBlock.Slice(1, 1).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_SByte_LE.WriteToSpan(_writableBlock.Slice(1, 1).Span, value);
            }
        }

        public Byte Field3
        {
            get
            {
                return (Byte)Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(2, 1).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(2, 1).Span, value);
            }
        }

        public Int16 Field4
        {
            get
            {
                return (Int16)Codec_Int16_LE.ReadFromSpan(_readonlyBlock.Slice(4, 2).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Int16_LE.WriteToSpan(_writableBlock.Slice(4, 2).Span, value);
            }
        }

        public UInt16 Field5
        {
            get
            {
                return (UInt16)Codec_UInt16_LE.ReadFromSpan(_readonlyBlock.Slice(6, 2).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_UInt16_LE.WriteToSpan(_writableBlock.Slice(6, 2).Span, value);
            }
        }

        public Char Field6
        {
            get
            {
                return (Char)Codec_Char_LE.ReadFromSpan(_readonlyBlock.Slice(8, 2).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Char_LE.WriteToSpan(_writableBlock.Slice(8, 2).Span, value);
            }
        }

        public Half Field7
        {
            get
            {
                return (Half)Codec_Half_LE.ReadFromSpan(_readonlyBlock.Slice(10, 2).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Half_LE.WriteToSpan(_writableBlock.Slice(10, 2).Span, value);
            }
        }

        public Int32 Field8
        {
            get
            {
                return (Int32)Codec_Int32_LE.ReadFromSpan(_readonlyBlock.Slice(12, 4).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Int32_LE.WriteToSpan(_writableBlock.Slice(12, 4).Span, value);
            }
        }

        public UInt32 Field9
        {
            get
            {
                return (UInt32)Codec_UInt32_LE.ReadFromSpan(_readonlyBlock.Slice(16, 4).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_UInt32_LE.WriteToSpan(_writableBlock.Slice(16, 4).Span, value);
            }
        }

        public Single Field10
        {
            get
            {
                return (Single)Codec_Single_LE.ReadFromSpan(_readonlyBlock.Slice(20, 4).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Single_LE.WriteToSpan(_writableBlock.Slice(20, 4).Span, value);
            }
        }

        public Int64 Field11
        {
            get
            {
                return (Int64)Codec_Int64_LE.ReadFromSpan(_readonlyBlock.Slice(24, 8).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Int64_LE.WriteToSpan(_writableBlock.Slice(24, 8).Span, value);
            }
        }

        public UInt64 Field12
        {
            get
            {
                return (UInt64)Codec_UInt64_LE.ReadFromSpan(_readonlyBlock.Slice(32, 8).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_UInt64_LE.WriteToSpan(_writableBlock.Slice(32, 8).Span, value);
            }
        }

        public Double Field13
        {
            get
            {
                return (Double)Codec_Double_LE.ReadFromSpan(_readonlyBlock.Slice(40, 8).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Double_LE.WriteToSpan(_writableBlock.Slice(40, 8).Span, value);
            }
        }

        public Guid Field14
        {
            get
            {
                return (Guid)Codec_Guid_LE.ReadFromSpan(_readonlyBlock.Slice(48, 16).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Guid_LE.WriteToSpan(_writableBlock.Slice(48, 16).Span, value);
            }
        }

        public Int128 Field15
        {
            get
            {
                return (Int128)Codec_Int128_LE.ReadFromSpan(_readonlyBlock.Slice(64, 16).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Int128_LE.WriteToSpan(_writableBlock.Slice(64, 16).Span, value);
            }
        }

        public UInt128 Field16
        {
            get
            {
                return (UInt128)Codec_UInt128_LE.ReadFromSpan(_readonlyBlock.Slice(80, 16).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_UInt128_LE.WriteToSpan(_writableBlock.Slice(80, 16).Span, value);
            }
        }

        public Decimal Field17
        {
            get
            {
                return (Decimal)Codec_Decimal_LE.ReadFromSpan(_readonlyBlock.Slice(96, 16).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Decimal_LE.WriteToSpan(_writableBlock.Slice(96, 16).Span, value);
            }
        }


        public bool Equals(MyDTO? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyBlock.Span.SequenceEqual(other._readonlyBlock.Span)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO other && Equals(other);
        public static bool operator ==(MyDTO? left, MyDTO? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO? left, MyDTO? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
#if NET8_0_OR_GREATER
            result.AddBytes(_readonlyBlock.Span);
#else
            var byteSpan = _readonlyBlock.Span;
            result.Add(byteSpan.Length);
            for (int i = 0; i < byteSpan.Length; i++)
            {
                result.Add(byteSpan[i]);
            }
#endif
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
